import time
import datetime
import re
from aiogram import Bot, types, Dispatcher
# from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import requests

from UserService import UserService
from GoogleSheet import GoogleSheetService
from OrderProduct import OrderProduct

# bot = Dispatcher(Bot(token='6534722740:AAHN3stKJwCZmfGx2TrPrigynrOmHNTJVmk'))
bot = Dispatcher(Bot(token='6946444897:AAHQYgMX0wZYC_bx72Mi5oWcCdJ9cj8PWMc')) #–º–æ–π –±–æ—Ç'
google_sheet_service = GoogleSheetService()
user_service = UserService()




@bot.message_handler(commands=["start"])
async def help_command(message: types.Message):


    user_id = message.from_user.id
    user_session = user_service.get_user_session(user_id)
    user_session.default_parameters()

    catalog_or_make_order = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
        *(['–ü–æ–∫–∞–∑–∞—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç', '–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä']))
    await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n'
                         '–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑.\n'
                         '–ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ /help', reply_markup=catalog_or_make_order)
    user_service.set_user_session(user_id, 1)


@bot.message_handler(commands=["info"])
async def help_command(message: types.Message):
    await message.answer('–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞–ø–∏—à–∏—Ç–µ /start\n–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É\nhttps://t.me/+V5Yas-uRvlNTiis0')


@bot.message_handler(commands=["help"])
async def help_command(message: types.Message):
    await message.answer('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏ /start\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –≥—Ä—É–ø–ø—É\nhttps://t.me/+V5Yas-uRvlNTiis0')


@bot.message_handler(content_types=["text"])
async def send_message(message: types.Message):
    user_id = message.from_user.id
    user_session = user_service.get_user_session(user_id)

    if user_session.state == 1:

        if message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç':

            msg = await message.answer(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ‚è≥")


            catalog = 'üêü–ù–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Çüêü\n\n'

            catalog += 'üìç–ü—Ä–æ–¥—É–∫—Ü–∏—è –≤ —É–ø–∞–∫–æ–≤–∫–∞—Ö –ø–æ 250 –≥—Ä\n\n'

            products_packing = google_sheet_service.get_products_list_packing()
            for product in products_packing:
                catalog += product.name + ': ' + product.price + product.unit + '\n'

            catalog += '\nüìç–ü–æ—à—Ç—É—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è:\n1 —Ä—ã–±–∫–∞ ~1,5-2 –∫–≥\n\n'
            products_apiece = google_sheet_service.get_products_list_apiece()
            for product in products_apiece:
                catalog += product.name + ': ' + product.price + product.unit + '\n'

            make_order = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
                KeyboardButton('–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä'))

            await msg.delete()
            await message.answer(f"{catalog}", reply_markup=make_order)
            return

        elif message.text == '–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä':
            msg = await message.answer(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ‚è≥")
            choose_product = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

            products_apiece = google_sheet_service.get_products_list_apiece()
            products_packing = google_sheet_service.get_products_list_packing()

            for product in products_packing:
                choose_product.add(product.name)

            for product in products_apiece:
                choose_product.add(product.name)

            await msg.delete()
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç:", reply_markup=choose_product)
            user_service.set_user_session(user_id, 2)

        else:

            catalog_or_make_order = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
                *(['–ü–æ–∫–∞–∑–∞—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç', '–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä']))
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=catalog_or_make_order)
            return

    elif user_session.state == 2:
        msg = await message.answer(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ‚è≥")
        message_product_name = message.text
        choose_product = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        product_name_apiece = []
        product_name_packing = []

        products_apiece = google_sheet_service.get_products_list_apiece()
        products_packing = google_sheet_service.get_products_list_packing()

        for product in products_packing:
            product_name_packing.append(product.name)
            choose_product.add(product.name)

        for product in products_apiece:
            product_name_apiece.append(product.name)
            choose_product.add(product.name)



        if message_product_name in product_name_apiece or message_product_name in product_name_packing:
            if user_session.change_product:
                user_session.orders[user_session.number_str_for_change].name = message_product_name
                check_order = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
                    *["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑"])
                await msg.delete()
                await message.answer("–î–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏–º –∑–∞–∫–∞–∑", reply_markup=check_order)
                user_service.set_user_session(user_id, 11)
                return
            if message_product_name in product_name_apiece:
                await msg.delete()
                await message.answer(
                    "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ–ª–∞–µ–º–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞\n1 —Ä—ã–±–∫–∞ ~1,5-2 –∫–≥")
            else:
                await msg.delete()
                await message.answer(
                    "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–∞–∫–æ–≤–æ–∫ –∂–µ–ª–∞–µ–º–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞\n1 —É–ø–∞–∫–æ–≤–∫–∞ 250–≥")

            order_product = OrderProduct()
            order_product.name = message_product_name
            user_service.set_user_session(user_id, 3)
            user_session.current_order = order_product
        else:
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=choose_product)
            return

    elif user_session.state == 3:
        count_product = message.text
        correct_count = count_product
        if ',' in correct_count or '.' in correct_count:
            correct_count = correct_count.replace(',', '')
            correct_count = correct_count.replace('.', '')

        if correct_count.isdigit():
            if user_session.change_weight:
                user_session.orders[user_session.number_str_for_change].count = count_product
                check_order = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
                    *["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑"])
                await message.answer("–î–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏–º –∑–∞–∫–∞–∑", reply_markup=check_order)
                user_service.set_user_session(user_id, 11)
            else:
                choose = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(*["–î–∞", "–ù–µ—Ç"])
                await message.answer('–•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?', reply_markup=choose)
                user_service.set_user_session(user_id, 4)
                current_order = user_session.current_order
                current_order.count = count_product
                user_session.orders.append(current_order)

        else:
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞.')
            return

    elif user_session.state == 4:

        if message.text == '–î–∞':
            msg = await message.answer(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ‚è≥")
            choose_product = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

            products_apiece = google_sheet_service.get_products_list_apiece()
            products_packing = google_sheet_service.get_products_list_packing()

            for product in products_packing:
                choose_product.add(product.name)

            for product in products_apiece:
                choose_product.add(product.name)

            await msg.delete()
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç:", reply_markup=choose_product)
            user_service.set_user_session(user_id, 2)

        elif message.text == '–ù–µ—Ç':
            if user_session.change_title:
                check_order = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
                    *["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑"])
                await message.answer("–î–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏–º –∑–∞–∫–∞–∑", reply_markup=check_order)
                user_service.set_user_session(user_id, 11)
            else:
                await message.answer("–û—Ç–ª–∏—á–Ω–æ!\n–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã")
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è:")
                user_service.set_user_session(user_id, 5)
        else:
            choose = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(*["–î–∞", "–ù–µ—Ç"])
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ')
            await message.answer('–•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?', reply_markup=choose)
            return

    elif user_session.state == 5:
        user_name = message.text
        user_session.name = user_name
        user_service.set_user_session(user_id, 6)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n+7-xxx-xxx-xx-xx')

    elif user_session.state == 6:
        phone = message.text

        result = re.match(r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$',
                          phone)
        if result:
            user_session.phone = phone
            user_service.set_user_session(user_id, 7)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏')
        else:
            await message.answer(
                '–ù–µ–≤–µ—Ä–µ–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n+7-xxx-xxx-xx-xx')
            return

    elif user_session.state == 7:
        user_session.address = message.text
        user_service.set_user_session(user_id, 8)
        await message.answer(
            '–ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏, –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø—Ä–∏–≤–µ–∑—Ç–∏ –∫ —ç—Ç–æ–º—É –¥–Ω—é.')

    elif user_session.state == 8:
        date_delivery = message.text
        user_session.delivery_date = date_delivery

        user_service.set_user_session(user_id, 9)
        choose = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(*["–î–∞", "–ù–µ—Ç"])
        await message.answer('–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É?', reply_markup=choose)

    elif user_session.state == 9:

        if message.text == '–î–∞':
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É")
            user_service.set_user_session(user_id, 10)

        elif message.text == '–ù–µ—Ç':
            check_order = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
                *["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑"])
            await message.answer("–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –∑–∞–∫–∞–∑", reply_markup=check_order)
            user_service.set_user_session(user_id, 11)
            user_session.add_inf = '-'
        else:
            choose = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(*["–î–∞", "–ù–µ—Ç"])
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É')
            await message.answer('–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É?', reply_markup=choose)
            return

    elif user_session.state == 10:
        add_inf = message.text
        user_service.set_user_session(user_id, 11)
        user_session.add_inf = add_inf
        check_order = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(*["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑"])
        await message.answer("–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –∑–∞–∫–∞–∑", reply_markup=check_order)

    elif user_session.state == 11:

        orders = user_session.orders
        send_orders = ''
        for order in orders:
            send_orders += order.name + ': ' + order.count + " —à—Ç\n"

        await message.answer(
            f"–ò–º—è: {user_session.name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_session.phone}\n–ê–¥—Ä–µ—Å: {user_session.address}\n–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞: {user_session.delivery_date}\n\n–í–∞—à –∑–∞–∫–∞–∑:\n{send_orders}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: {user_session.add_inf}")
        user_service.set_user_session(user_id, 12)
        choose = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(*["–î–∞", "–ù–µ—Ç"])
        await message.answer('–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=choose)

    elif user_session.state == 12:
        if message.text == '–î–∞':
            await message.answer(
                "–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É\nhttps://t.me/+V5Yas-uRvlNTiis0\n\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start")
            user_service.set_user_session(user_id, 1000)
            order_date = datetime.datetime.now().strftime('%d.%m.%y')
            orders = ''
            for order in user_session.orders:
                orders += order.name + ': ' + order.count + '\n'
            google_sheet_service.write_order(message.from_user.username, user_session.name, user_session.phone,
                                             user_session.address, orders,
                                             user_session.delivery_date, order_date, user_session.add_inf)
            user_session.default_parameters()

            params = {
                'chat_id': '1324557750', #–º–æ–π id
                # 'chat_id': '217744186',
                'text': '–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑',
            }
            requests.get('https://api.telegram.org/bot6534722740:AAHN3stKJwCZmfGx2TrPrigynrOmHNTJVmk/sendMessage',
                         params=params)

        elif message.text == '–ù–µ—Ç':
            change_order = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
                *["–ò–º—è", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–ê–¥—Ä–µ—Å", "–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", "–ó–∞–∫–∞–∑", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
            await message.answer("–ö–∞–∫–æ–µ –ø–æ–ª–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=change_order)
            user_service.set_user_session(user_id, 13)

        else:
            choose = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(*["–î–∞", "–ù–µ—Ç"])
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É')
            await message.answer('–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É?', reply_markup=choose)
            return

    elif user_session.state == 13:
        change_title = message.text
        user_session.change_title = change_title
        if change_title == "–ó–∞–∫–∞–∑":
            change_order = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
                *["–î–æ–±–∞–≤–∏—Ç—å", "–ò–∑–º–µ–Ω–∏—Ç—å", '–£–¥–∞–ª–∏—Ç—å'])
            await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å?",
                                 reply_markup=change_order)
            user_service.set_user_session(user_id, 15)
            return
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
        user_service.set_user_session(user_id, 14)

    elif user_session.state == 14:
        change_value = message.text
        change_title = user_session.change_title
        if change_title == '–ò–º—è':
            user_session.name = change_value
        elif change_title == '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞':
            # –ø—Ä–æ–≤–µ—Ä–∫–∞
            result = re.match(r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$',
                              change_value)

            if result:
                user_session.phone = change_value
            else:
                await message.answer(
                    '–ù–µ–≤–µ—Ä–µ–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n+7-xxx-xxx-xx-xx')
                return
        elif change_title == '–ê–¥—Ä–µ—Å':
            user_session.address = change_value

        elif change_title == "–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏":
            user_session.delivery_date = change_value

        elif change_title == "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π":
            user_session.add_inf = change_value
        else:
            change_order = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
                *["–ò–º—è", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–ê–¥—Ä–µ—Å", "–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", "–ó–∞–∫–∞–∑", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å",
                                 reply_markup=change_order)
            return

        check_order = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(*["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑"])
        await message.answer("–î–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏–º –∑–∞–∫–∞–∑", reply_markup=check_order)
        user_service.set_user_session(user_id, 11)

    elif user_session.state == 15:
        change_value_order = message.text
        if change_value_order == '–î–æ–±–∞–≤–∏—Ç—å':
            msg = await message.answer(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ‚è≥")
            choose_product = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

            products_apiece = google_sheet_service.get_products_list_apiece()
            products_packing = google_sheet_service.get_products_list_packing()

            for product in products_packing:
                choose_product.add(product.name)
            for product in products_apiece:
                choose_product.add(product.name)

            await msg.delete()
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç:", reply_markup=choose_product)
            user_service.set_user_session(user_id, 2)

        elif change_value_order == '–ò–∑–º–µ–Ω–∏—Ç—å':
            change_order = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
                *["–í–µ—Å", "–ü—Ä–æ–¥—É–∫—Ç"])
            await message.answer("–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç?", reply_markup=change_order)
            user_service.set_user_session(user_id, 17)

        elif change_value_order == '–£–¥–∞–ª–∏—Ç—å':

            orders = user_session.orders
            product_list = []
            for order in orders:
                product_list.append(order.name)
            del_order = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
                *product_list)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=del_order)
            user_service.set_user_session(user_id, 16)

        else:
            change_order = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
                *["–î–æ–±–∞–≤–∏—Ç—å", "–ò–∑–º–µ–Ω–∏—Ç—å"])
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n–í—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑",
                                 reply_markup=change_order)
            return

    elif user_session.state == 16:
        name_for_delete = message.text
        orders = user_session.orders
        product_list = []
        for order in orders:
            product_list.append(order.name)

        if name_for_delete in product_list:
            index_for_del = product_list.index(name_for_delete)
            user_session.orders.pop(index_for_del)
            check_order = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
                *["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑"])
            await message.answer("–î–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏–º –∑–∞–∫–∞–∑", reply_markup=check_order)
            user_service.set_user_session(user_id, 11)

        else:
            del_order = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
                *product_list)
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞',
                                 reply_markup=del_order)
            return

    elif user_session.state == 17:
        change_order = message.text
        orders = user_session.orders
        product_list = []
        send_orders = ''
        counter = 1
        for order in orders:
            product_list.append(order.name)
            send_orders += str(counter) + ': ' + order.name + ': ' + order.count + " —à—Ç\n"
            counter += 1

        if change_order == '–í–µ—Å':
            user_session.change_weight = True

        elif change_order == '–ü—Ä–æ–¥—É–∫—Ç':
            user_session.change_product = True

        else:
            change_orders = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
                *["–í–µ—Å", "–ü—Ä–æ–¥—É–∫—Ç"])
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç?",
                                 reply_markup=change_orders)
            return

        change_orders = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
            *[str(i) for i in range(1, counter)])
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å {change_order.lower()}:\n{send_orders}",
                             reply_markup=change_orders)

        user_service.set_user_session(user_id, 18)

    elif user_session.state == 18:
        try:
            number_string = int(message.text) - 1
            if number_string == -1:
                user_session.number_str_for_change = 0
            user_session.number_str_for_change = number_string

            if user_session.change_product:
                choose_product = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

                products_apiece = google_sheet_service.get_products_list_apiece()
                products_packing = google_sheet_service.get_products_list_packing()

                for product in products_packing:
                    choose_product.add(product.name)
                for product in products_apiece:
                    choose_product.add(product.name)

                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=choose_product)
                user_service.set_user_session(user_id, 2)
            elif user_session.change_weight:
                await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                user_service.set_user_session(user_id, 3)

        except:
            change_orders = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
                *[str(i) for i in range(1, len(user_session.orders) + 1)])
            await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—è",
                                 reply_markup=change_orders)

    else:
        await message.answer('–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–æ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /info')


def start_bot():
    if __name__ == '__main__':
        print('The bot is running')
        executor.start_polling(bot)


start_bot()
